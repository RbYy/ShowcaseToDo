@page "/"
@using Newtonsoft.Json
@using ShowCaseToDo.Models
@namespace ShowCaseToDo
@inject IDialogService DialogService
@inject IJSRuntime JS


<FluentStack Orientation="Orientation.Horizontal">
    <FluentGrid Justify="JustifyContent.FlexStart" Spacing="1">
        <FluentGridItem xs="12" sm="12">
            <FluentSortableList Class="height-50" ref="sortable" Fallback="true" Items="items" OnUpdate="SortList">
                <ItemTemplate>
	                <FluentStack ref="itemElement" @onclick="() => ShowDetails(context)"
	                             class="@(context.CssClasses.BackGroundClass)"
	                             Orientation="Orientation.Horizontal"
	                             style="display: flex; justify-content: space-between; align-items: center; margin: 0">
@* 		                <FluentBadge class="@context.CssClasses.BadgeClass">@context.Status.ToString()</FluentBadge>
 *@
		                <FluentLabel class="@(context.CssClasses.BackGroundClass)"
		                             Style="width: 100%; margin: 0; padding: 0 5px">
			                @context.Title
		                </FluentLabel>
		                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
			                
			                <div @onclick:stopPropagation="true">
			                <FluentButton Appearance="Appearance.Stealth"
			                              @onclick="() => UpdateStatus(context, Status.ToDo)"
			                              Style="border-radius: 50%; padding: 6px;"
			                              IconStart="new Icons.Filled.Size16.Calendar().WithColor(Color.Warning)"
			                              Title="To Do"/>
			                </div>

			                <div @onclick:stopPropagation="true">
				                <FluentButton Appearance="Appearance.Stealth"
				                              @onclick="() => UpdateStatus(context, Status.InProgress)"
				                              Style="border-radius: 50%; padding: 6px;"
				                              IconStart="new Icons.Filled.Size16.Edit().WithColor(Color.Accent)"
				                              Title="In Progress"/>
			                </div>

			                <div @onclick:stopPropagation="true">
			                <FluentButton Appearance="Appearance.Stealth"
			                              @onclick="() => UpdateStatus(context, Status.Completed)"
			                              Style="border-radius: 50%; padding: 6px;"
			                              IconStart="new Icons.Filled.Size16.Checkmark().WithColor(Color.Success)"
			                              Title="Completed"/>
			                </div>

			                <div @onclick:stopPropagation="true">
				                <FluentButton Appearance="Appearance.Stealth"
				                              @onclick="() => UpdateStatus(context, Status.Canceled)"
				                              Style="border-radius: 50%; padding: 6px;"
				                              IconStart="new Icons.Filled.Size16.Prohibited().WithColor(Color.Disabled)"
				                              Title="Cancel"/>
			                </div>

			                <div @onclick:stopPropagation="true">
			                <FluentButton
				                Appearance="Appearance.Stealth"
				                @onclick="() => RemoveItem(context)"
				                Style="border-radius: 50%; padding: 6px;"
				                IconStart="new Icons.Filled.Size16.Dismiss().WithColor(Color.Error)"
				                Title="Remove"/>
			                </div>

		                </FluentStack>
	                </FluentStack>
                </ItemTemplate>
            </FluentSortableList>
        </FluentGridItem>
    </FluentGrid>

    <FluentButton   
        Appearance="Appearance.Accent"
        @onclick="async()=>await AddItem()" 
        Style="border-radius: 50%;padding:6px;height:4.5em"
        IconStart="new Icons.Filled.Size48.Add().WithColor(Color.Lightweight)" />
</FluentStack>

@code {
     
    private FluentStack itemElement;
    private FluentSortableList<Item> sortable;

    public List<Item> items = Enumerable.Range(1, 10).Select(i => 
	    new Item 
	    {
		    Id = i, 
		    Title = $"Title {i}",
		    Details = @"'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\System.Runtime.Numerics.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\System.Formats.Asn1.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
               CaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\Microsoft.Win32.Primitives.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                "
	    }
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
	    await base.OnInitializedAsync();
        if (!File.Exists(App.DataFilePath)) return;
        var jsonString = await File.ReadAllTextAsync(App.DataFilePath);
	    if (jsonString == null) return;
	    items = JsonConvert.DeserializeObject<List<Item>>(jsonString);
    }

    private async Task RemoveItem(Item item)
    {
        items.RemoveAt(item.Id-1);
        await File.WriteAllTextAsync(App.DataFilePath, JsonConvert.SerializeObject(items));
    }
    private async Task AddItem()
    {
	    var item = new Item();
        DialogParameters parameters = new()
        {
	        Title = $"Create New Task",
	        Width = "500px",
	        TrapFocus = true,
	        Modal = true,
	        PreventScroll = false
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(item, parameters);
        DialogResult? result = await dialog.Result;


        if (!string.IsNullOrWhiteSpace(item.Title) || !string.IsNullOrWhiteSpace(item.Details))
        {
	       items.Add(item);
        }
        await File.WriteAllTextAsync(App.DataFilePath, JsonConvert.SerializeObject(items));

    }

    protected override void OnAfterRender(bool firstRender)
    {
	    base.OnAfterRender(firstRender);
        JS.InvokeVoidAsync("itemNoPadding");
    }

    private async Task UpdateStatus(Item item, Status status)
    {
        item.Status = status;
        var a = sortable;
        await File.WriteAllTextAsync(App.DataFilePath, JsonConvert.SerializeObject(items));
    }

    private async Task ShowDetails(Item item)
    {
        DialogParameters parameters = new()
            {
                Title = $"Hello {item.Title}",
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = false
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(item, parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is not null)
        {
            Item? newItem = result.Data as Item;
        }

        var a = JsonConvert.SerializeObject(items);
        var b = App.DataFilePath;
        await File.WriteAllTextAsync(App.DataFilePath, JsonConvert.SerializeObject(items));

    }
    private async Task SortList(FluentSortableListEventArgs args)
    {
        if (args is null || args.OldIndex == args.NewIndex)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        var items = this.items;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }
        await File.WriteAllTextAsync(App.DataFilePath, JsonConvert.SerializeObject(items));

    }

    //*************************************************************************/

    public void AddClass(FluentComponentBase component, string cssClass)
    {
        HashSet<string> cssClasses = new HashSet<string>();
        if (component.Class != null)
        {
            cssClasses = [.. component.Class?.Split(' ')];
        }

        cssClasses.Add(cssClass);
        component.Class = string.Join(' ', cssClasses);
    }

    public void RemoveClass(FluentComponentBase component, string cssClass)
    {
        HashSet<string> cssClasses = new HashSet<string>();
        if (component.Class != null)
        {
            cssClasses = [.. component.Class?.Split(' ')];
        }

        cssClasses.Remove(cssClass);
        component.Class = string.Join(' ', cssClasses);
    }

    public void UpdateCssClasses(FluentComponentBase component, ICollection<string> cssClasses, bool addCondition)
    {
        foreach (var cssClass in cssClasses)
	    {
		    if (addCondition)
		    {
			    AddClass(component, cssClass);
		    }
		    else
		    {
			    RemoveClass(component, cssClass);
		    }
	    };
    }

}