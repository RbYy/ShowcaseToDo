@page "/"
@using ShowCaseToDo.Models
@namespace ShowCaseToDo
@inject IDialogService DialogService

<FluentStack Orientation="Orientation.Horizontal">
    <FluentGrid Justify="JustifyContent.FlexStart" Spacing="1">
        <FluentGridItem xs="12" sm="12">
            <FluentSortableList Fallback="true" Items="items" OnUpdate="SortList">
                <ItemTemplate >
                    <FluentStack ref="itemElement" @onclick="()=>ShowDetails(context)"
                                 Orientation="Orientation.Horizontal" 
                                style="display: flex; justify-content: space-between; align-items: center; background:@(backgroundStatus)">
                            <FluentLabel  Style="width:100%">@context.Title</FluentLabel>
                            <FluentStack Orientation="Orientation.Horizontal" >
                                <FluentButton Appearance="Appearance.Stealth"
                                              @onclick="()=>UpdateStatus(context, Status.ToDo)"
                                              Style="border-radius: 50%;padding:6px;"
                                              IconStart="new Icons.Filled.Size16.Calendar().WithColor(Color.Warning)" />
                                <FluentButton Appearance="Appearance.Stealth"
                                          @onclick="()=>UpdateStatus(context, Status.InProgress)"
                                              Style="border-radius: 50%;padding:6px;"
                                              IconStart="new Icons.Filled.Size16.Edit().WithColor(Color.Accent)" />
                                <FluentButton Appearance="Appearance.Stealth"
                                          @onclick="()=>UpdateStatus(context, Status.Completed)"
                                          Style="border-radius: 50%;padding:6px;"
                                          IconStart="new Icons.Filled.Size16.Prohibited().WithColor(Color.Success)" />
                                <FluentButton Appearance="Appearance.Stealth"
                                          @onclick="()=>UpdateStatus(context, Status.Canceled)"
                                          Style="border-radius: 50%;padding:6px;"
                                          IconStart="new Icons.Filled.Size16.Prohibited().WithColor(Color.Disabled)" />

                                <FluentButton 
                                    Appearance="Appearance.Stealth" 
                                    @onclick="()=>RemoveItem(context)" 
                                    Style="border-radius: 50%;padding:6px;" 
                                    IconStart="new Icons.Filled.Size16.Dismiss().WithColor(Color.Error)" />
                            </FluentStack>
                    </FluentStack>
                </ItemTemplate>
            </FluentSortableList>
        </FluentGridItem>
    </FluentGrid>

    <FluentButton   
        Appearance="Appearance.Accent"
        @onclick="AddItem" 
        Style="border-radius: 50%;padding:6px;height:4.5em"
        IconStart="new Icons.Filled.Size48.Add().WithColor(Color.Lightweight)" />
</FluentStack>

@code {
     
    private Microsoft.Maui.Graphics.Color backgroundStatus;
    private FluentStack itemElement;
    public List<Item> items = Enumerable.Range(1, 10).Select(i => 
        new Item 
        {
            Id = i, 
            Title = $"Title {i}",
            Details = @"'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\System.Runtime.Numerics.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\System.Formats.Asn1.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\System.Net.Http.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Users\Robert Brumat\source\repos\ShowcaseToDo\ShowCaseToDo\bin\Debug\net8.0-windows10.0.19041.0\win10-x64\AppX\Microsoft.AspNetCore.Components.Forms.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                'ShowCaseToDo.exe' (CoreCLR: clrhost): Loaded 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\8.0.2\Microsoft.Win32.Primitives.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.
                "
        }
    ).ToList();

    private void RemoveItem(Item item)
    {
        items.RemoveAt(item.Id);
    }
    private void AddItem(object o)
    {

    }
    private void UpdateStatus(Item item, Status status)
    {
        item.Status = status;
        backgroundStatus = Item.StatusColors[status];
    }

    private async Task ShowDetails(Item item)
    {
        DialogParameters parameters = new()
            {
                Title = $"Hello {item.Title}",
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = false
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EditDialog>(item, parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is not null)
        {
            Item? newItem = result.Data as Item;
        }

    }
    private void SortList(FluentSortableListEventArgs args)
    {
        if (args is null || args.OldIndex == args.NewIndex)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        var items = this.items;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }
    }

    //*************************************************************************/

    public void AddClass(FluentComponentBase component, string cssClass)
    {
        HashSet<string> cssClasses = new HashSet<string>();
        if (component.Class != null)
        {
            cssClasses = [.. component.Class?.Split(' ')];
        }

        cssClasses.Add(cssClass);
        component.Class = string.Join(' ', cssClasses);
    }

    public void RemoveClass(FluentComponentBase component, string cssClass)
    {
        HashSet<string> cssClasses = new HashSet<string>();
        if (component.Class != null)
        {
            cssClasses = [.. component.Class?.Split(' ')];
        }

        cssClasses.Remove(cssClass);
        component.Class = string.Join(' ', cssClasses);
    }

}