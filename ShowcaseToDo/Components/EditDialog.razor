@using ShowCaseToDo.Models
@using ShowCaseToDo.Services
@implements IDialogContentComponent<Item>
@namespace ShowCaseToDo
@inject IStorage<Item> Storage
<FluentDialogHeader></FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
        <FluentStack class="@BackGroundClass" 
            Style="padding:1em 3em 1em 0" Orientation="Orientation.Horizontal" VerticalGap="10" HorizontalAlignment="HorizontalAlignment.Right">
            <StateButtonSet OnStatusSet="UpdateStatus" Item="Content"></StateButtonSet>
            <FluentStack class="@BackGroundClass" Orientation="Orientation.Horizontal" VerticalGap="10" HorizontalAlignment="HorizontalAlignment.Right">
                <FluentIcon Value="@StatusIcon"></FluentIcon>
                <H3>@Content.Status.ToString()</H3>
            </FluentStack>
        </FluentStack>

        <FluentTextField @bind-Value="@Content.Title">Task Title:</FluentTextField>

        <FluentTextArea Rows="8" Cols="80" @bind-Value="@Content.Details">Task Details:</FluentTextArea>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter Visible="false"></FluentDialogFooter>

@code {
    [Parameter]
    public Item Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    public Icon? StatusIcon => ShowCaseToDo.Models.TaskStatus.CssClasses.FirstOrDefault(i => i.Status == Content.Status)?.Icon;
    public string? BackGroundClass => ShowCaseToDo.Models.TaskStatus.CssClasses.FirstOrDefault(i => i.Status == Content.Status)?.BackGroundClass;
    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }
    
    private async Task UpdateStatus(Tuple<Status, Item> statusitem)
    {
        statusitem.Item2.Status = statusitem.Item1;
        await Storage.UpdateAsync(statusitem.Item2);
    }

}